<?xml version="1.0"?>
<!--
Software License Agreement (BSD)

\file      husky_empty_world.launch
\authors   Paul Bovbel <pbovbel@clearpathrobotics.com, Devon Ash <dash@clearpathrobotics.com>
\copyright Copyright (c) 2015, Clearpath Robotics, Inc., All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are permitted provided that
the following conditions are met:
 * Redistributions of source code must retain the above copyright notice, this list of conditions and the
   following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
   following disclaimer in the documentation and/or other materials provided with the distribution.
 * Neither the name of Clearpath Robotics nor the names of its contributors may be used to endorse or promote
   products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WAR-
RANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, IN-
DIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
-->
<launch>
  <arg name="arm_description_file" default="$(dirname)/inc/load_ur5.launch.xml" doc="Launch file which populates the 'robot_description' parameter."/>
  <!-- <arg name="world_name" default="$(find husky_ur5)/world/test.world"/> -->
  <!-- <arg name="world_name" default="$(find husky_ur5)/world/turtlebot3_world.world"/> -->
  <arg name="joint_limit_params" default="$(find husky_ur5)/config/ur5/joint_limits.yaml"/>
  <arg name="kinematics_params" default="$(find husky_ur5)/config/ur5/default_kinematics.yaml"/>
  <arg name="physical_params" default="$(find husky_ur5)/config/ur5/physical_parameters.yaml"/>
  <arg name="visual_params" default="$(find husky_ur5)/config/ur5/visual_parameters.yaml"/>


  <!-- Controller configuration -->
  <arg name="controller_config_file" default="$(find husky_ur5)/config/ur5_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller eff_joint_traj_controller gripper_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="joint_group_eff_controller" doc="Controllers that are initally loaded, but not started."/>
  
  <!-- Load urdf on the parameter server -->
  <include file="$(arg arm_description_file)">
    <arg name="joint_limit_params" value="$(arg joint_limit_params)"/>
    <arg name="kinematics_params" value="$(arg kinematics_params)"/>
    <arg name="physical_params" value="$(arg physical_params)"/>
    <arg name="visual_params" value="$(arg visual_params)"/>
  </include>


  <!--<rosparam file="$(find husky_ur5)/config/ur5_husky.yaml" command="load"/>
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>
  
  <node name="ros_control_controller_manager" pkg="controller_manager" type="controller_manager" respawn="false" output="screen" args="load joint_group_position_controller" />-->
  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- Load and start the controllers listed in the 'controllers' arg. -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
    args="$(arg controllers)" output="screen" respawn="false" />

  <!-- Load other controllers, but do not start them -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

  <include file="$(find cloud_merger)/launch/Starter.launch">
  </include>
  <!-- <include file="$(find robotiq_2f_gripper_control)/launch/test_85mm_gripper.launch">
  </include> -->

  
  <arg name="sim" default="true" />

  <!--- Run gmapping -->
  <include file="$(find husky_ur5)/launch/moveit_planning_execution.launch">
    <arg name="sim" value="$(arg sim)" />
  </include>

  <include file="$(find arm_controller)/launch/arm.launch">
  </include>

  <!--gripper-->
  <group ns="gripper_planning">
    <rosparam command="load" file="$(find robotiq_85_moveit_config)/config/joint_limits.yaml"/>
  </group>
</launch>
